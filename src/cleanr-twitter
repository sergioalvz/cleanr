#!/usr/bin/env node

const program = require("commander");
const csv = require("csv");
const { createReadStream } = require("fs");
const Twitter = require("twitter-lite");

const {
  TWITTER_CONSUMER_KEY,
  TWITTER_CONSUMER_SECRET,
  TWITTER_ACCESS_TOKEN,
  TWITTER_ACCESS_TOKEN_SECRET
} = process.env;

function buildTwitter({
  consumerKey = TWITTER_CONSUMER_KEY,
  consumerSecret = TWITTER_CONSUMER_SECRET,
  accessToken = TWITTER_ACCESS_TOKEN,
  accessTokenSecret = TWITTER_ACCESS_TOKEN_SECRET
}) {
  return new Twitter({
    consumer_key: consumerKey,
    consumer_secret: consumerSecret,
    access_token_key: accessToken,
    access_token_secret: accessTokenSecret
  });
}

async function count({ file }) {
  function parse() {
    return new Promise((resolve, reject) => {
      let numberOfRecords = 0;

      const parser = csv.parse({ delimiter: "," });

      createReadStream(file)
        .pipe(parser)
        .on("data", () => numberOfRecords++)
        .on("end", () => resolve(numberOfRecords));
    });
  }

  const numberOfTweets = await parse();

  console.log(numberOfTweets - 1);
}

async function verify({ accessToken, accessTokenSecret }) {
  const twitter = buildTwitter({ accessToken, accessTokenSecret });

  const response = await twitter.get("account/verify_credentials");

  if (response.errors) {
    console.error(response.errors);

    process.exit(1);
  }
}

program
  .command("verify")
  .description("verifies that everything's okay")
  .option("-t, --access-token [token]", "user's access token")
  .option("-s, --access-token-secret [secret]", "user's access token secret")
  .action(verify);

program
  .command("count")
  .description("counts the number of tweets")
  .option("-f, --file [path]", "path to back-up file")
  .action(count);

program.parse(process.argv);
