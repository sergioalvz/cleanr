#!/usr/bin/env node

const program = require("commander");
const csv = require("csv");
const { createReadStream } = require("fs");
const moment = require("moment");
const Twitter = require("twitter-lite");

const {
  TWITTER_CONSUMER_KEY,
  TWITTER_CONSUMER_SECRET,
  TWITTER_ACCESS_TOKEN,
  TWITTER_ACCESS_TOKEN_SECRET
} = process.env;

function buildTwitter({
  consumerKey = TWITTER_CONSUMER_KEY,
  consumerSecret = TWITTER_CONSUMER_SECRET,
  accessToken = TWITTER_ACCESS_TOKEN,
  accessTokenSecret = TWITTER_ACCESS_TOKEN_SECRET
}) {
  return new Twitter({
    consumer_key: consumerKey,
    consumer_secret: consumerSecret,
    access_token_key: accessToken,
    access_token_secret: accessTokenSecret
  });
}

function parse({ file, query: { until = moment.utc() } = {} }) {
  return new Promise(resolve => {
    let counter = 0;
    const rows = [];

    createReadStream(file)
      .pipe(csv.parse({ delimiter: "," }))
      .on("data", row => {
        if (counter > 0) {
          const timestamp = moment(row[3], "YYYY-MM-DD HH:mm:ss +0000");

          if (timestamp.isBefore(until)) {
            rows.push(row);
          }
        }

        counter++;
      })
      .on("end", () => resolve(rows));
  });
}

async function count({ file }) {
  const rows = await parse({ file });

  console.log(rows.length);
}

async function select({ file, until }) {
  const rows = await parse({ file, query: { until } });
  const identifiers = rows.map(row => row[0]).join("\n");

  console.log(identifiers);
}

async function verify({ accessToken, accessTokenSecret }) {
  const twitter = buildTwitter({ accessToken, accessTokenSecret });

  const response = await twitter.get("account/verify_credentials");

  if (response.errors) {
    console.error(response.errors);

    process.exit(1);
  }
}

program
  .command("count")
  .description("counts the number of tweets")
  .option("-f, --file [path]", "path to back-up file")
  .action(count);

program
  .command("select")
  .description("returns identifiers with matching criteria")
  .option("-f, --file [path]", "path to back-up file")
  .option("--until [date]", "date until that identifiers will be returned")
  .action(select);

program
  .command("verify")
  .description("verifies that everything's okay")
  .option("-t, --access-token [token]", "user's access token")
  .option("-s, --access-token-secret [secret]", "user's access token secret")
  .action(verify);

program.parse(process.argv);
